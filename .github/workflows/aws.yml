name: Deploy to EC2 using AWS CLI and Docker Swarm

on:
  push:
    branches:
      - "main"
      - "rollback"
jobs:
  deploy-master:
    name: Deploy to EC2 (Prod) with Docker Swarm
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AMAZON_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AMAZON_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AMAZON_S3_REGION_NAME }}

      # Step 3: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AMAZON_S3_REGION_NAME }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

          docker build -t static-website:v3 .
          docker tag static-website:v3 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AMAZON_S3_REGION_NAME }}.amazonaws.com/static-website:v3
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AMAZON_S3_REGION_NAME }}.amazonaws.com/static-website:v3

      # Step 4: Upload docker-stack.yml to S3 (Swarm stack file)
      - name: Upload docker-stack.yml to S3
        run: |
          aws s3 cp docker-stack.yml s3://${{ secrets.S3_BUCKET_NAME }}/docker-stack.yml --region ${{ secrets.AMAZON_S3_REGION_NAME }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AMAZON_S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AMAZON_S3_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AMAZON_S3_REGION_NAME }}

      # Step 5: Deploy Docker Stack on EC2 via SSM (Docker Swarm)
      - name: Deploy Docker Stack via SSM
        run: |
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          REGION=${{ secrets.AMAZON_S3_REGION_NAME }}
          ECR_URI=${{ secrets.ECR_URI }}
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          INSTANCE_ID=i-07a7ff0d0e44e03c5

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${INSTANCE_ID}" \
            --parameters "commands=[
              'set -e',
              'echo Enabling Docker Swarm...',
              'docker swarm init || echo Already initialized',
              'echo Downloading the docker-stack.yml from S3...',
              'aws s3 cp s3://${S3_BUCKET_NAME}/docker-stack.yml /home/ubuntu/docker-stack.yml --region ${REGION}',
              'echo Logging into ECR...',
              'aws ecr get-login-password --region ${REGION} | sudo docker login --username AWS --password-stdin ${ECR_URI}',
              'echo Deploying with Docker Stack...',
              'sudo docker stack deploy -c /home/ubuntu/docker-stack.yml --with-registry-auth statwebsite',
              'echo Deployment complete!'
            ]" \
            --comment "Swarm Deployment with Zero Downtime" \
            --region "$REGION" \
            --query "Command.CommandId" --output text)

          echo "SSM Command ID: $COMMAND_ID"

          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --region $REGION \
              --query "Status" --output text)

            echo "Current Status: $STATUS"

            if [ "$STATUS" = "Success" ]; then
              echo "SSM Command completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "SSM Command failed or was cancelled."
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --region $REGION \
                --query "StandardErrorContent" --output text

              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --region $REGION \
                --query "StandardOutputContent" --output text
              exit 1
            else
              sleep 10
            fi
          done
