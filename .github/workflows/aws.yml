name: Deploy to EC2 using AWS CLI

on:
  push:
    branches:
      - "master"

jobs:
  deploy-master:
    name: Deploy to EC2 (Prod)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Zip the Code
      - name: Zip the Project
        run: |
          zip -r microscopy_frontend_app.zip . -x "*.git*" "*node_modules*" "*__pycache__*"

      # Step 5: Upload the Code to S3
      - name: Upload Code to S3
        run: |
          aws s3 cp static_website.zip s3://diagnostic-images-bucket/deployments/static_website.zip

      - name: Deploy & Run Docker on EC2 via SSM
        run: |
          # Send the SSM command and capture the command ID
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=i-01d8883ea8fdcb7ca" \
            --parameters "commands=[
              'set -e',

              'echo Downloading the latest code from S3...',
              'aws s3 cp s3://diagnostic-images-bucket/deployments/static_website.zip /home/ubuntu/static_website.zip --region ${{ secrets.AWS_REGION }}',

              'echo Extracting static website code...',
              'mkdir -p /home/ubuntu/static_website',
              'rm -rf /home/ubuntu/static_website/*',
              'unzip -o /home/ubuntu/static_website.zip -d /home/ubuntu/static_website',
              'rm -f /home/ubuntu/static_website.zip',

              'echo Removing old Docker containers and images...',
              'docker-compose -f /home/ubuntu/static_website/docker-compose.yml stop',

              'echo Building GenAI Docker Image...',
              'cd /home/ubuntu/static_website',
              'docker build -t static-website:latest .',
              'docker-compose up -d',

              'docker system prune -f || true',
              'echo Finished everything'
            ]" \
            --comment "Deploying new Docker image to EC2" \
            --region ${{ secrets.AWS_REGION }} \
            --query "Command.CommandId" --output text)

          echo "SSM Command ID: $COMMAND_ID"

          # Wait for the command to complete
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id i-01d8883ea8fdcb7ca \
              --region ${{ secrets.AWS_REGION }} \
              --query "Status" --output text)

            echo "Current Status: $STATUS"

            if [ "$STATUS" = "Success" ]; then
              echo "SSM Command completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "SSM Command failed or was cancelled."
              # Print error output
              echo "Fetching command output..."
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id i-01d8883ea8fdcb7ca \
                --region ${{ secrets.AWS_REGION }} \
                --query "StandardErrorContent" \
                --output text

              # Optionally print standard output too
              echo "Fetching standard output..."
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id i-01d8883ea8fdcb7ca \
                --region ${{ secrets.AWS_REGION }} \
                --query "StandardOutputContent" \
                --output text

              exit 1
            else
              # Wait before checking again
              sleep 10
            fi
          done
